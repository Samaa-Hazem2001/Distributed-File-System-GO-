syntax = "proto3";

option go_package = "Ass/AllServices";

package AllServices;

//----------  Update and Download  -----------//
//from client to master -m.s
message UpdateRequest {
}
message UpdateResponse {
    int32 port_num = 1;
    string data_node_ip = 2;
}

message DownloadRequest {
    string file_name = 1;
}
message DownloadResponse {
    //repeated int32 machine_node = 1; //<=? list!! ://"list" is bonus for parellel downloading
    int32 port_num = 1;
    string data_node_ip = 2;
}

service ClientService {
    rpc Upload(UpdateRequest) returns (UpdateResponse);
    rpc Download(DownloadRequest) returns (DownloadResponse);
}



//----------  Upload File and Download File  -----------//
//from client to machine : for uploading process (m.s)
message DownloadFileRequest {
    string file_name = 1;
    int32 port_num = 2;
}
message DownloadFileResponse {
    bytes file = 1;
}

message UploadFileRequest {
    bytes file = 1;
    string file_name = 2;
    string client_ip = 3;
    int32 client_port_num = 4;

    int32 port_num = 5;
    //string data_node_ip = 6;

}
// later: if there is a respose from the machine to client or the client will take the response from master only(valid to send empty response??)  
message UploadFileResponse {
}

service FileService {
    rpc UploadFile(UploadFileRequest) returns (UploadFileResponse);
    rpc DownloadFile(DownloadFileRequest) returns (DownloadFileResponse);
    rpc NotifyMachineDataTransfer(notifyMachineDataTransferRequest) returns (notifyMachineDataTransferResponse);
    rpc TransferFile(TransferFileUploadRequest) returns (TransferFileUploadResponse);



}
//----------  Notify Machine  -----------//
message notifyMachineDataTransferRequest {
    string source_ip = 1;
    string dist_ip = 2;
    int32 port_num = 3;
    string file_name = 4;
} 
message notifyMachineDataTransferResponse {
} 

//----------  Transfer File  -----------//
//from machine to machine -m.s
message TransferFileUploadRequest {
    string file_name = 1;
    bytes file = 2;
    int32 port_num =3;
}
message TransferFileUploadResponse {
    bool success = 1;
    string message = 2;
}



//----------  Existance for Replication   -----------//
//from master to mashine

message RepExstRequest {
    //??  
}

message RepExstResponse {
    //? m7taga a2ol ll master 7aga ?
}

service RepExstService {
    rpc RepExst(RepExstRequest) returns (RepExstResponse);
}

//----------  Keeper Done (step5) and Alive and replicationDone -----------//
//from mashine to master

message KeeperDoneRequest {
    string file_name = 1;
    int32 file_size = 2;
    string client_ip = 3;
    int32 client_port_num = 4;

    int32 port_num = 5;
    string data_node_ip = 6;
    //int32 keeper_id = 7;  //later: if you could know from the established connection's ip(el conection ely el keeper hy3mlo 34an yklm el master -m.s) who is the keeper, ypu can delete it -m.s
    

    //later + important : 
    // i think we need the id of the machine as there maybe multiple users distrubuted on machine keepers,
    // so i want to know which machine finish to notify which user
    //? but how to get the id of the user ?
    //? if we will now him from the port he connected to master by it , tb ma n4el el keeper_id kman w nm4y bnfs el mbda?!!   
}

message KeeperDoneResponse {  
}

message KeeperDoneDownRequest {
    int32 port_num = 1;
    string data_node_ip = 2;  
}

message KeeperDoneDownResponse {  
}

message ReplicationDoneRequest {
    //NOTE: we will not notify the client about the replication finishing
    string file_name = 1;
    int32 port_num = 2; //to make the master mark this ort for this machine as "not busy"
    string data_node_ip = 3;
    //int32 keeper_id = 7; 
}

message ReplicationDoneResponse {  
}

message AliveRequest {
    string data_node_ip = 1;
    //int32 keeper_id = 1;
}

message AliveResponse {
}


service KeepersService {
    rpc KeeperDone(KeeperDoneRequest) returns (KeeperDoneResponse);
    rpc KeeperDoneDown(KeeperDoneDownRequest) returns (KeeperDoneDownResponse);
    rpc ReplicationDone(ReplicationDoneRequest) returns (ReplicationDoneResponse);
    rpc Alive(AliveRequest) returns (AliveResponse);

}

//----------  Master Done Uploading  -----------//
//from master to client 
//? is the master really send the req to client ? y3ny el client hwa ely hyb3t req fady w ystna el master yrd b el step(6) "success"?

message DoneUpRequest {
}

message DoneUpResponse {
    //? m7taga a2ol ll master 7aga ?
}

service DoneUpService {
    rpc DoneUp(DoneUpRequest) returns (DoneUpResponse);
}